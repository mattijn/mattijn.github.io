[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "mattijn.github.io",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\n\n\n\n\nFeb 28, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\n\n\nFeb 25, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\nVerken de diversiteit van Nederlandse gemeenten\n\n\n\n\n\n\n\n\n\n\n\nJan 26, 2024\n\n\nMattijn van Hoek\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/2024-01-26-CBS-nationaliteiten/2024-01-26 CBS Nationaliteit.html",
    "href": "posts/2024-01-26-CBS-nationaliteiten/2024-01-26 CBS Nationaliteit.html",
    "title": "Verken de diversiteit van Nederlandse gemeenten",
    "section": "",
    "text": "In dit artikel duiken we diep in de gegevens van Nederlandse gemeenten op basis van geboortelanden, van de ruwe data tot een boeiende interactieve visualisatie.\nMet behulp van de cbsodata-bibliotheek verzamelen we gedetailleerde bevolkingsgegevens per nationaliteit voor het jaar 2023. Dankzij slimme filtering en coding identificeren we vervolgens per gemeente de twee meest voorkomende Nationaliteiten.\n\n\nCode\nimport cbsodata\nimport pandas as pd\nimport geopandas as gpd\nimport altair as alt\nimport topojson as tp\n\n\n# list of nationaliteit codes\nnatcodes_landen = ['NAT9278','NAT9281','NAT9292','NAT9300','NAT9301','NAT9303','NAT9307','NAT9310','NAT9322','NAT9324','NAT9326','NAT9330','NAT9332','NAT9336','NAT9338','NAT9345','NAT9346','NAT9348','NAT9349','NAT9350','NAT9351','NAT9353','NAT9356','NAT9357','NAT9368','NAT9372','NAT9377','NAT9387','NAT9403','NAT9406','NAT9409','NAT9410','NAT9415','NAT9416','NAT9417','NAT9418','NAT9436','NAT9440','NAT9442','NAT9444','NAT9448','NAT9454','NAT9458','NAT9470','NAT9473','NAT9480']\nfilter_natcodes = ''.join([f\"(Nationaliteit eq '{natcode}') or \" for natcode in natcodes_landen]).rstrip(' or ')\nfilter_natcodes\n\n# collect data for selection of nationalities\ndf = pd.DataFrame(cbsodata.get_data(\n    table_id='85644NED', \n    select=['Bevolking_1', 'Nationaliteit', 'RegioS'], \n    filters=f\"((Geslacht eq 'T001038')) and ((Leeftijd eq '10000')) and ({filter_natcodes}) and ((Perioden eq '2023JJ00')) and ((substringof('GM',RegioS)))\"\n))\ndf = df.dropna(subset='Bevolking_1', how='any')\n\n# get 2nd largest groups for eacht gemeente\ndf_max_2per_gemeente = df.loc[df.groupby('RegioS')['Bevolking_1'].nlargest(2).reset_index(level=0, drop=True).index]\n\n# split in two dataframes\ndf_pop_one = df.loc[df_max_2per_gemeente.groupby('RegioS')['Bevolking_1'].head(1).index]\ndf_pop_two = df.loc[df_max_2per_gemeente.groupby('RegioS')['Bevolking_1'].tail(1).index]\n\n# load IDs of each gemeente\ndf_regioscodes = pd.read_csv('RegioSCodes.csv', sep=';')\ndf_gemcodes = df_regioscodes[df_regioscodes.Identifier.str.startswith('GM')]\n\n# combine with our data from CBS\ndf_pop_one_gemeente_id = pd.merge(df_gemcodes[['Identifier', 'Title']], df_pop_one, right_on='RegioS', left_on='Title', how='left').drop('Title', axis=1)\ndf_pop_two_gemeente_id = pd.merge(df_gemcodes[['Identifier', 'Title']], df_pop_two, right_on='RegioS', left_on='Title', how='left').drop('Title', axis=1)\n\n# load geometry of each gemeente\ngeodata_url = 'gemeenten_2023.geo.json'\ngemeentegrenzen = gpd.read_file(geodata_url, driver='GeoJSON')\ngemeentegrenzen = tp.Topology(gemeentegrenzen, toposimplify=1000, topoquantize=1000).to_gdf()\n\n# connect CBS-data to geometroe wit gemcodes\ndf_pop_one_gemeente_id_geom = pd.merge(gemeentegrenzen[['statcode', 'statnaam', 'geometry']], df_pop_one_gemeente_id, right_on='Identifier', left_on='statcode', how='left').drop(['RegioS', 'Identifier', 'statcode'], axis=1)\ndf_pop_two_gemeente_id_geom = pd.merge(gemeentegrenzen[['statcode', 'statnaam', 'geometry']], df_pop_two_gemeente_id, right_on='Identifier', left_on='statcode', how='left').drop(['RegioS', 'Identifier', 'statcode'], axis=1)\n\n# rename columns\ndf_pop_one_gemeente_id_geom.columns = ['Gemeente', 'geometry', 'Aantal', 'Nationaliteit']\ndf_pop_two_gemeente_id_geom.columns = ['Gemeente', 'geometry', 'Aantal', 'Nationaliteit']\n\n\nMet Altair zijn we in staat om levendige kaarten en staafdiagrammen te creëren. Kleurrijke details, vormen en interactieve elementen maken de data niet alleen toegankelijk, maar ook boeiend. Verken de gegevens op jouw eigen tempo met legenda’s en selectiemogelijkheden.\n\n\nCode\n# build chart\nselection = alt.selection_point(fields=['Nationaliteit'], bind='legend', empty=True)\nfill_colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf', '#aec7e8', '#ffbb78', '#98df8a', '#ff9896', '#c5b0d5', '#c49c94', '#f7b6d2', '#c7c7c7', '#dbdb8d', '#9edae5', '#ad494a', '#8c6d31']\n\nleft_geom = alt.Chart(df_pop_one_gemeente_id_geom, title=alt.Title(text=' ', subtitle='1e meestvoorkomende nationaliteit')).mark_geoshape(tooltip=True, stroke='black').encode(\n    fill=alt.Color('Nationaliteit').scale(range=fill_colors).legend(orient='bottom', columns=9).sort(field='Aantal', op='count', order='descending'),\n    strokeWidth=alt.condition(selection, alt.value(0.4), alt.value(0)),   \n    tooltip=[alt.Tooltip('Gemeente'), alt.Tooltip('Nationaliteit'), alt.Tooltip('Aantal')],\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n).project(type='identity', reflectY=True)\n\nleft_bar = alt.Chart(\n    df_pop_one_gemeente_id_geom, \n    title=alt.Title(text=' ', subtitle='1e meestvoorkomende nationaliteit')\n).mark_bar(tooltip=True, stroke='black').encode(\n    x=alt.X('count()').title('Aantal gemeenten'),\n    y=alt.Y('Nationaliteit').sort('-x').title(None), \n    fill=alt.Fill('Nationaliteit').scale(range=fill_colors).sort(field='Aantal', op='count', order='descending'),\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n)\n\nright_bar = alt.Chart(\n    df_pop_two_gemeente_id_geom, \n    title=alt.Title(text=' ', subtitle='2e meestvoorkomende nationaliteit')\n).mark_bar(tooltip=True, stroke='black').encode(\n    x=alt.X('count()').scale(reverse=True).title('Aantal gemeenten'),\n    y=alt.Y('Nationaliteit').sort('-x').axis(orient='right').title(None), \n    fill=alt.Fill('Nationaliteit').scale(range=fill_colors).sort(field='Aantal', op='count', order='descending'),\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n)\n\nright_geom = alt.Chart(df_pop_two_gemeente_id_geom, title=alt.Title(text=' ',subtitle='2e meestvoorkomende nationaliteit')).mark_geoshape(tooltip=True, stroke='black').encode(\n    fill=alt.Color('Nationaliteit').scale(range=fill_colors).sort(field='Aantal', op='count', order='descending'),\n    strokeWidth=alt.condition(selection, alt.value(0.4), alt.value(0)),   \n    tooltip=[alt.Tooltip('Gemeente'), alt.Tooltip('Nationaliteit'), alt.Tooltip('Aantal')],\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n).project(type='identity', reflectY=True)\n\nalt.renderers.set_embed_options(actions=False, renderer='svg')\nalt.hconcat(\n    left_bar.properties(height=400, width=100),\n    left_geom.properties(height=400, width=400),\n    right_geom.properties(height=400, width=400),\n    right_bar.properties(height=400, width=100)\n).properties(\n    title=alt.TitleParams(text='Nederlandse gemeenten op basis van nationaliteit.', subtitle='CBS, PDOK (2023)', anchor='start')\n).configure_legend(\n    titleFontSize=15,\n    labelFontSize=15,\n    labelLimit=200\n).configure_title(\n    fontSize=15,\n    subtitleFontSize=15\n).add_params(\n    selection\n)\n\n\n\n\n\n\nDe kaart is hoverbaar en de legenda items zijn klikbaar. Ergens in de legenda niet op een naam klikken maakt de selectie ongedaan.\n\n\nDeze analyse onthult inzichten in de diversiteit van nationaliteiten binnen Nederlandse gemeenten. De interactieve visualisatie nodigt je uit om verder te ontdekken, waardoor je een levendig beeld krijgt van de diverse culturen in Nederland.\nKlaar om de diversiteit binnen Nederlandse gemeenten te verkennen? Ontdek de diversiteit van de Nederlandse samenleving per gemeente.\n\n\nCode\noptions = df.RegioS.unique().tolist()\ninput_dropdown = alt.binding_select(\n    options=options,\n    name='Gemeente: '\n)\nselection = alt.selection_point(\n    fields=['RegioS'],\n    bind=input_dropdown,\n    empty=False,\n    value='Amsterdam'\n)\n\nalt.data_transformers.disable_max_rows()\nalt.renderers.set_embed_options(actions=False, renderer='svg')\nalt.Chart(df, width=1325).mark_bar(tooltip=True, stroke='black', opacity=1).encode(\n    y=alt.Y('Bevolking_1:Q').title('Aantal in gemeente'),\n    x=alt.X('Nationaliteit').sort('-y').title(None),\n    fill=alt.Fill('Bevolking_1')\n        .legend(title='Aantal in gemeente', orient='top')\n        .title('Aantal in gemeente')\n        .scale(domain=[0, 75000], range=['#FEFBE9', '#FCF7D5', '#F5F3C1', '#EAF0B5', '#DDECBF', '#D0E7CA', '#C2E3D2', '#B5DDD8', '#A8D8DC', '#9BD2E1', '#8DCBE4', '#81C4E7', '#7BBCE7', '#7EB2E4', '#88A5DD', '#9398D2', '#9B8AC4', '#9D7DB2', '#9A709E', '#906388', '#805770', '#684957', '#46353A'], type='pow', exponent=0.2, interpolate='rgb',)\n).add_params(\n    selection\n).transform_filter(\n    selection\n).properties(\n    title=alt.TitleParams(text='Nationaliteiten per gemeente op basis van geboorteland buiten Nederland.', subtitle='CBS, PDOK (2023)', anchor='start')\n)\n\n\n\n\n\n\nDe staafdiagram is hoverbaar en het selectie menu biedt mogelijkheden om een andere gemeente te selecteren.\n\n\nEn om het helemaal af te maken, de gemeenten gesorteerd per nationaliteit.\n\n\nCode\noptions = df.Nationaliteit.unique().tolist()\ninput_dropdown = alt.binding_select(\n    options=options,\n    name='Nationaliteit: '\n)\nselection = alt.selection_point(\n    fields=['Nationaliteit'],\n    bind=input_dropdown,\n    empty=False,\n    value='Pools'\n)\n\nalt.data_transformers.disable_max_rows()\nalt.renderers.set_embed_options(actions=False, renderer='svg')\nalt.Chart(df, width=1325).mark_bar(tooltip=True, stroke='black', opacity=1).encode(\n    y=alt.Y('Bevolking_1:Q').title('Aantal in gemeente'),\n    x=alt.X('RegioS').sort('-y').title(None),\n    fill=alt.Fill('Bevolking_1')\n        .legend(title='Aantal in gemeente', orient='top')\n        .title('Aantal in gemeente')\n        .scale(domain=[0, 75000], range=['#FEFBE9', '#FCF7D5', '#F5F3C1', '#EAF0B5', '#DDECBF', '#D0E7CA', '#C2E3D2', '#B5DDD8', '#A8D8DC', '#9BD2E1', '#8DCBE4', '#81C4E7', '#7BBCE7', '#7EB2E4', '#88A5DD', '#9398D2', '#9B8AC4', '#9D7DB2', '#9A709E', '#906388', '#805770', '#684957', '#46353A'], type='pow', exponent=0.2, interpolate='rgb',)\n).add_params(\n    selection\n).transform_filter(\n    selection\n).transform_window(\n    rank='rank(RegioS)',\n    sort=[alt.SortField('Bevolking_1', order='descending')]\n).transform_filter(\n    (alt.datum.rank &lt; 30)\n).properties(\n    title=alt.TitleParams(text='Gemeenten per nationaliteit op basis van geboorteland buiten Nederland.', subtitle='CBS, PDOK (2023)', anchor='start')\n)\n\n\n\n\n\n\nDe staafdiagram is hoverbaar en het selectie menu biedt mogelijkheden om een andere nationaliteit te selecteren."
  },
  {
    "objectID": "posts/2024-01-26-CBS-nationaliteiten/2024-01-26 CBS Nationaliteit.html#verken-de-diversiteit-van-nederlandse-gemeenten",
    "href": "posts/2024-01-26-CBS-nationaliteiten/2024-01-26 CBS Nationaliteit.html#verken-de-diversiteit-van-nederlandse-gemeenten",
    "title": "Verken de diversiteit van Nederlandse gemeenten",
    "section": "",
    "text": "In dit artikel duiken we diep in de gegevens van Nederlandse gemeenten op basis van geboortelanden, van de ruwe data tot een boeiende interactieve visualisatie.\nMet behulp van de cbsodata-bibliotheek verzamelen we gedetailleerde bevolkingsgegevens per nationaliteit voor het jaar 2023. Dankzij slimme filtering en coding identificeren we vervolgens per gemeente de twee meest voorkomende Nationaliteiten.\n\n\nCode\nimport cbsodata\nimport pandas as pd\nimport geopandas as gpd\nimport altair as alt\nimport topojson as tp\n\n\n# list of nationaliteit codes\nnatcodes_landen = ['NAT9278','NAT9281','NAT9292','NAT9300','NAT9301','NAT9303','NAT9307','NAT9310','NAT9322','NAT9324','NAT9326','NAT9330','NAT9332','NAT9336','NAT9338','NAT9345','NAT9346','NAT9348','NAT9349','NAT9350','NAT9351','NAT9353','NAT9356','NAT9357','NAT9368','NAT9372','NAT9377','NAT9387','NAT9403','NAT9406','NAT9409','NAT9410','NAT9415','NAT9416','NAT9417','NAT9418','NAT9436','NAT9440','NAT9442','NAT9444','NAT9448','NAT9454','NAT9458','NAT9470','NAT9473','NAT9480']\nfilter_natcodes = ''.join([f\"(Nationaliteit eq '{natcode}') or \" for natcode in natcodes_landen]).rstrip(' or ')\nfilter_natcodes\n\n# collect data for selection of nationalities\ndf = pd.DataFrame(cbsodata.get_data(\n    table_id='85644NED', \n    select=['Bevolking_1', 'Nationaliteit', 'RegioS'], \n    filters=f\"((Geslacht eq 'T001038')) and ((Leeftijd eq '10000')) and ({filter_natcodes}) and ((Perioden eq '2023JJ00')) and ((substringof('GM',RegioS)))\"\n))\ndf = df.dropna(subset='Bevolking_1', how='any')\n\n# get 2nd largest groups for eacht gemeente\ndf_max_2per_gemeente = df.loc[df.groupby('RegioS')['Bevolking_1'].nlargest(2).reset_index(level=0, drop=True).index]\n\n# split in two dataframes\ndf_pop_one = df.loc[df_max_2per_gemeente.groupby('RegioS')['Bevolking_1'].head(1).index]\ndf_pop_two = df.loc[df_max_2per_gemeente.groupby('RegioS')['Bevolking_1'].tail(1).index]\n\n# load IDs of each gemeente\ndf_regioscodes = pd.read_csv('RegioSCodes.csv', sep=';')\ndf_gemcodes = df_regioscodes[df_regioscodes.Identifier.str.startswith('GM')]\n\n# combine with our data from CBS\ndf_pop_one_gemeente_id = pd.merge(df_gemcodes[['Identifier', 'Title']], df_pop_one, right_on='RegioS', left_on='Title', how='left').drop('Title', axis=1)\ndf_pop_two_gemeente_id = pd.merge(df_gemcodes[['Identifier', 'Title']], df_pop_two, right_on='RegioS', left_on='Title', how='left').drop('Title', axis=1)\n\n# load geometry of each gemeente\ngeodata_url = 'gemeenten_2023.geo.json'\ngemeentegrenzen = gpd.read_file(geodata_url, driver='GeoJSON')\ngemeentegrenzen = tp.Topology(gemeentegrenzen, toposimplify=1000, topoquantize=1000).to_gdf()\n\n# connect CBS-data to geometroe wit gemcodes\ndf_pop_one_gemeente_id_geom = pd.merge(gemeentegrenzen[['statcode', 'statnaam', 'geometry']], df_pop_one_gemeente_id, right_on='Identifier', left_on='statcode', how='left').drop(['RegioS', 'Identifier', 'statcode'], axis=1)\ndf_pop_two_gemeente_id_geom = pd.merge(gemeentegrenzen[['statcode', 'statnaam', 'geometry']], df_pop_two_gemeente_id, right_on='Identifier', left_on='statcode', how='left').drop(['RegioS', 'Identifier', 'statcode'], axis=1)\n\n# rename columns\ndf_pop_one_gemeente_id_geom.columns = ['Gemeente', 'geometry', 'Aantal', 'Nationaliteit']\ndf_pop_two_gemeente_id_geom.columns = ['Gemeente', 'geometry', 'Aantal', 'Nationaliteit']\n\n\nMet Altair zijn we in staat om levendige kaarten en staafdiagrammen te creëren. Kleurrijke details, vormen en interactieve elementen maken de data niet alleen toegankelijk, maar ook boeiend. Verken de gegevens op jouw eigen tempo met legenda’s en selectiemogelijkheden.\n\n\nCode\n# build chart\nselection = alt.selection_point(fields=['Nationaliteit'], bind='legend', empty=True)\nfill_colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf', '#aec7e8', '#ffbb78', '#98df8a', '#ff9896', '#c5b0d5', '#c49c94', '#f7b6d2', '#c7c7c7', '#dbdb8d', '#9edae5', '#ad494a', '#8c6d31']\n\nleft_geom = alt.Chart(df_pop_one_gemeente_id_geom, title=alt.Title(text=' ', subtitle='1e meestvoorkomende nationaliteit')).mark_geoshape(tooltip=True, stroke='black').encode(\n    fill=alt.Color('Nationaliteit').scale(range=fill_colors).legend(orient='bottom', columns=9).sort(field='Aantal', op='count', order='descending'),\n    strokeWidth=alt.condition(selection, alt.value(0.4), alt.value(0)),   \n    tooltip=[alt.Tooltip('Gemeente'), alt.Tooltip('Nationaliteit'), alt.Tooltip('Aantal')],\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n).project(type='identity', reflectY=True)\n\nleft_bar = alt.Chart(\n    df_pop_one_gemeente_id_geom, \n    title=alt.Title(text=' ', subtitle='1e meestvoorkomende nationaliteit')\n).mark_bar(tooltip=True, stroke='black').encode(\n    x=alt.X('count()').title('Aantal gemeenten'),\n    y=alt.Y('Nationaliteit').sort('-x').title(None), \n    fill=alt.Fill('Nationaliteit').scale(range=fill_colors).sort(field='Aantal', op='count', order='descending'),\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n)\n\nright_bar = alt.Chart(\n    df_pop_two_gemeente_id_geom, \n    title=alt.Title(text=' ', subtitle='2e meestvoorkomende nationaliteit')\n).mark_bar(tooltip=True, stroke='black').encode(\n    x=alt.X('count()').scale(reverse=True).title('Aantal gemeenten'),\n    y=alt.Y('Nationaliteit').sort('-x').axis(orient='right').title(None), \n    fill=alt.Fill('Nationaliteit').scale(range=fill_colors).sort(field='Aantal', op='count', order='descending'),\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n)\n\nright_geom = alt.Chart(df_pop_two_gemeente_id_geom, title=alt.Title(text=' ',subtitle='2e meestvoorkomende nationaliteit')).mark_geoshape(tooltip=True, stroke='black').encode(\n    fill=alt.Color('Nationaliteit').scale(range=fill_colors).sort(field='Aantal', op='count', order='descending'),\n    strokeWidth=alt.condition(selection, alt.value(0.4), alt.value(0)),   \n    tooltip=[alt.Tooltip('Gemeente'), alt.Tooltip('Nationaliteit'), alt.Tooltip('Aantal')],\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n).project(type='identity', reflectY=True)\n\nalt.renderers.set_embed_options(actions=False, renderer='svg')\nalt.hconcat(\n    left_bar.properties(height=400, width=100),\n    left_geom.properties(height=400, width=400),\n    right_geom.properties(height=400, width=400),\n    right_bar.properties(height=400, width=100)\n).properties(\n    title=alt.TitleParams(text='Nederlandse gemeenten op basis van nationaliteit.', subtitle='CBS, PDOK (2023)', anchor='start')\n).configure_legend(\n    titleFontSize=15,\n    labelFontSize=15,\n    labelLimit=200\n).configure_title(\n    fontSize=15,\n    subtitleFontSize=15\n).add_params(\n    selection\n)\n\n\n\n\n\n\nDe kaart is hoverbaar en de legenda items zijn klikbaar. Ergens in de legenda niet op een naam klikken maakt de selectie ongedaan.\n\n\nDeze analyse onthult inzichten in de diversiteit van nationaliteiten binnen Nederlandse gemeenten. De interactieve visualisatie nodigt je uit om verder te ontdekken, waardoor je een levendig beeld krijgt van de diverse culturen in Nederland.\nKlaar om de diversiteit binnen Nederlandse gemeenten te verkennen? Ontdek de diversiteit van de Nederlandse samenleving per gemeente.\n\n\nCode\noptions = df.RegioS.unique().tolist()\ninput_dropdown = alt.binding_select(\n    options=options,\n    name='Gemeente: '\n)\nselection = alt.selection_point(\n    fields=['RegioS'],\n    bind=input_dropdown,\n    empty=False,\n    value='Amsterdam'\n)\n\nalt.data_transformers.disable_max_rows()\nalt.renderers.set_embed_options(actions=False, renderer='svg')\nalt.Chart(df, width=1325).mark_bar(tooltip=True, stroke='black', opacity=1).encode(\n    y=alt.Y('Bevolking_1:Q').title('Aantal in gemeente'),\n    x=alt.X('Nationaliteit').sort('-y').title(None),\n    fill=alt.Fill('Bevolking_1')\n        .legend(title='Aantal in gemeente', orient='top')\n        .title('Aantal in gemeente')\n        .scale(domain=[0, 75000], range=['#FEFBE9', '#FCF7D5', '#F5F3C1', '#EAF0B5', '#DDECBF', '#D0E7CA', '#C2E3D2', '#B5DDD8', '#A8D8DC', '#9BD2E1', '#8DCBE4', '#81C4E7', '#7BBCE7', '#7EB2E4', '#88A5DD', '#9398D2', '#9B8AC4', '#9D7DB2', '#9A709E', '#906388', '#805770', '#684957', '#46353A'], type='pow', exponent=0.2, interpolate='rgb',)\n).add_params(\n    selection\n).transform_filter(\n    selection\n).properties(\n    title=alt.TitleParams(text='Nationaliteiten per gemeente op basis van geboorteland buiten Nederland.', subtitle='CBS, PDOK (2023)', anchor='start')\n)\n\n\n\n\n\n\nDe staafdiagram is hoverbaar en het selectie menu biedt mogelijkheden om een andere gemeente te selecteren.\n\n\nEn om het helemaal af te maken, de gemeenten gesorteerd per nationaliteit.\n\n\nCode\noptions = df.Nationaliteit.unique().tolist()\ninput_dropdown = alt.binding_select(\n    options=options,\n    name='Nationaliteit: '\n)\nselection = alt.selection_point(\n    fields=['Nationaliteit'],\n    bind=input_dropdown,\n    empty=False,\n    value='Pools'\n)\n\nalt.data_transformers.disable_max_rows()\nalt.renderers.set_embed_options(actions=False, renderer='svg')\nalt.Chart(df, width=1325).mark_bar(tooltip=True, stroke='black', opacity=1).encode(\n    y=alt.Y('Bevolking_1:Q').title('Aantal in gemeente'),\n    x=alt.X('RegioS').sort('-y').title(None),\n    fill=alt.Fill('Bevolking_1')\n        .legend(title='Aantal in gemeente', orient='top')\n        .title('Aantal in gemeente')\n        .scale(domain=[0, 75000], range=['#FEFBE9', '#FCF7D5', '#F5F3C1', '#EAF0B5', '#DDECBF', '#D0E7CA', '#C2E3D2', '#B5DDD8', '#A8D8DC', '#9BD2E1', '#8DCBE4', '#81C4E7', '#7BBCE7', '#7EB2E4', '#88A5DD', '#9398D2', '#9B8AC4', '#9D7DB2', '#9A709E', '#906388', '#805770', '#684957', '#46353A'], type='pow', exponent=0.2, interpolate='rgb',)\n).add_params(\n    selection\n).transform_filter(\n    selection\n).transform_window(\n    rank='rank(RegioS)',\n    sort=[alt.SortField('Bevolking_1', order='descending')]\n).transform_filter(\n    (alt.datum.rank &lt; 30)\n).properties(\n    title=alt.TitleParams(text='Gemeenten per nationaliteit op basis van geboorteland buiten Nederland.', subtitle='CBS, PDOK (2023)', anchor='start')\n)\n\n\n\n\n\n\nDe staafdiagram is hoverbaar en het selectie menu biedt mogelijkheden om een andere nationaliteit te selecteren."
  },
  {
    "objectID": "posts/2024-01-26-CBS-nationaliteiten/index.html",
    "href": "posts/2024-01-26-CBS-nationaliteiten/index.html",
    "title": "Verken de diversiteit van Nederlandse gemeenten",
    "section": "",
    "text": "In dit artikel duiken we diep in de gegevens van Nederlandse gemeenten op basis van geboortelanden, van de ruwe data tot een boeiende interactieve visualisatie.\nMet behulp van de cbsodata-bibliotheek verzamelen we gedetailleerde bevolkingsgegevens per nationaliteit voor het jaar 2023. Dankzij slimme filtering en coding identificeren we vervolgens per gemeente de twee meest voorkomende Nationaliteiten.\n\n\nCode\nimport cbsodata\nimport pandas as pd\nimport geopandas as gpd\nimport altair as alt\nimport topojson as tp\n\n\n# list of nationaliteit codes\nnatcodes_landen = ['NAT9278','NAT9281','NAT9292','NAT9300','NAT9301','NAT9303','NAT9307','NAT9310','NAT9322','NAT9324','NAT9326','NAT9330','NAT9332','NAT9336','NAT9338','NAT9345','NAT9346','NAT9348','NAT9349','NAT9350','NAT9351','NAT9353','NAT9356','NAT9357','NAT9368','NAT9372','NAT9377','NAT9387','NAT9403','NAT9406','NAT9409','NAT9410','NAT9415','NAT9416','NAT9417','NAT9418','NAT9436','NAT9440','NAT9442','NAT9444','NAT9448','NAT9454','NAT9458','NAT9470','NAT9473','NAT9480']\nfilter_natcodes = ''.join([f\"(Nationaliteit eq '{natcode}') or \" for natcode in natcodes_landen]).rstrip(' or ')\nfilter_natcodes\n\n# collect data for selection of nationalities\ndf = pd.DataFrame(cbsodata.get_data(\n    table_id='85644NED', \n    select=['Bevolking_1', 'Nationaliteit', 'RegioS'], \n    filters=f\"((Geslacht eq 'T001038')) and ((Leeftijd eq '10000')) and ({filter_natcodes}) and ((Perioden eq '2023JJ00')) and ((substringof('GM',RegioS)))\"\n))\ndf = df.dropna(subset='Bevolking_1', how='any')\n\n# get 2nd largest groups for eacht gemeente\ndf_max_2per_gemeente = df.loc[df.groupby('RegioS')['Bevolking_1'].nlargest(2).reset_index(level=0, drop=True).index]\n\n# split in two dataframes\ndf_pop_one = df.loc[df_max_2per_gemeente.groupby('RegioS')['Bevolking_1'].head(1).index]\ndf_pop_two = df.loc[df_max_2per_gemeente.groupby('RegioS')['Bevolking_1'].tail(1).index]\n\n# load IDs of each gemeente\ndf_regioscodes = pd.read_csv('RegioSCodes.csv', sep=';')\ndf_gemcodes = df_regioscodes[df_regioscodes.Identifier.str.startswith('GM')]\n\n# combine with our data from CBS\ndf_pop_one_gemeente_id = pd.merge(df_gemcodes[['Identifier', 'Title']], df_pop_one, right_on='RegioS', left_on='Title', how='left').drop('Title', axis=1)\ndf_pop_two_gemeente_id = pd.merge(df_gemcodes[['Identifier', 'Title']], df_pop_two, right_on='RegioS', left_on='Title', how='left').drop('Title', axis=1)\n\n# load geometry of each gemeente\ngeodata_url = 'gemeenten_2023.geo.json'\ngemeentegrenzen = gpd.read_file(geodata_url, driver='GeoJSON')\ngemeentegrenzen = tp.Topology(gemeentegrenzen, toposimplify=1000, topoquantize=1000).to_gdf()\n\n# connect CBS-data to geometroe wit gemcodes\ndf_pop_one_gemeente_id_geom = pd.merge(gemeentegrenzen[['statcode', 'statnaam', 'geometry']], df_pop_one_gemeente_id, right_on='Identifier', left_on='statcode', how='left').drop(['RegioS', 'Identifier', 'statcode'], axis=1)\ndf_pop_two_gemeente_id_geom = pd.merge(gemeentegrenzen[['statcode', 'statnaam', 'geometry']], df_pop_two_gemeente_id, right_on='Identifier', left_on='statcode', how='left').drop(['RegioS', 'Identifier', 'statcode'], axis=1)\n\n# rename columns\ndf_pop_one_gemeente_id_geom.columns = ['Gemeente', 'geometry', 'Aantal', 'Nationaliteit']\ndf_pop_two_gemeente_id_geom.columns = ['Gemeente', 'geometry', 'Aantal', 'Nationaliteit']\n\n\nMet Altair zijn we in staat om levendige kaarten en staafdiagrammen te creëren. Kleurrijke details, vormen en interactieve elementen maken de data niet alleen toegankelijk, maar ook boeiend. Verken de gegevens op jouw eigen tempo met legenda’s en selectiemogelijkheden.\n\n\nCode\n# build chart\nselection = alt.selection_point(fields=['Nationaliteit'], bind='legend', empty=True)\nfill_colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf', '#aec7e8', '#ffbb78', '#98df8a', '#ff9896', '#c5b0d5', '#c49c94', '#f7b6d2', '#c7c7c7', '#dbdb8d', '#9edae5', '#ad494a', '#8c6d31']\n\nleft_geom = alt.Chart(df_pop_one_gemeente_id_geom, title=alt.Title(text=' ', subtitle='1e meestvoorkomende nationaliteit')).mark_geoshape(tooltip=True, stroke='black').encode(\n    fill=alt.Color('Nationaliteit').scale(range=fill_colors).legend(orient='bottom', columns=9).sort(field='Aantal', op='count', order='descending'),\n    strokeWidth=alt.condition(selection, alt.value(0.4), alt.value(0)),   \n    tooltip=[alt.Tooltip('Gemeente'), alt.Tooltip('Nationaliteit'), alt.Tooltip('Aantal')],\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n).project(type='identity', reflectY=True)\n\nleft_bar = alt.Chart(\n    df_pop_one_gemeente_id_geom, \n    title=alt.Title(text=' ', subtitle='1e meestvoorkomende nationaliteit')\n).mark_bar(tooltip=True, stroke='black').encode(\n    x=alt.X('count()').title('Aantal gemeenten'),\n    y=alt.Y('Nationaliteit').sort('-x').title(None), \n    fill=alt.Fill('Nationaliteit').scale(range=fill_colors).sort(field='Aantal', op='count', order='descending'),\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n)\n\nright_bar = alt.Chart(\n    df_pop_two_gemeente_id_geom, \n    title=alt.Title(text=' ', subtitle='2e meestvoorkomende nationaliteit')\n).mark_bar(tooltip=True, stroke='black').encode(\n    x=alt.X('count()').scale(reverse=True).title('Aantal gemeenten'),\n    y=alt.Y('Nationaliteit').sort('-x').axis(orient='right').title(None), \n    fill=alt.Fill('Nationaliteit').scale(range=fill_colors).sort(field='Aantal', op='count', order='descending'),\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n)\n\nright_geom = alt.Chart(df_pop_two_gemeente_id_geom, title=alt.Title(text=' ',subtitle='2e meestvoorkomende nationaliteit')).mark_geoshape(tooltip=True, stroke='black').encode(\n    fill=alt.Color('Nationaliteit').scale(range=fill_colors).sort(field='Aantal', op='count', order='descending'),\n    strokeWidth=alt.condition(selection, alt.value(0.4), alt.value(0)),   \n    tooltip=[alt.Tooltip('Gemeente'), alt.Tooltip('Nationaliteit'), alt.Tooltip('Aantal')],\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n).project(type='identity', reflectY=True)\n\nalt.renderers.set_embed_options(actions=False, renderer='svg')\nalt.hconcat(\n    left_bar.properties(height=400, width=100),\n    left_geom.properties(height=400, width=400),\n    right_geom.properties(height=400, width=400),\n    right_bar.properties(height=400, width=100)\n).properties(\n    title=alt.TitleParams(text='Nederlandse gemeenten op basis van nationaliteit.', subtitle='CBS, PDOK (2023)', anchor='start')\n).configure_legend(\n    titleFontSize=15,\n    labelFontSize=15,\n    labelLimit=200\n).configure_title(\n    fontSize=15,\n    subtitleFontSize=15\n).add_params(\n    selection\n)\n\n\n\n\n\n\nDe kaart is hoverbaar en de legenda items zijn klikbaar. Ergens in de legenda niet op een naam klikken maakt de selectie ongedaan.\n\n\nDeze analyse onthult inzichten in de diversiteit van nationaliteiten binnen Nederlandse gemeenten. De interactieve visualisatie nodigt je uit om verder te ontdekken, waardoor je een levendig beeld krijgt van de diverse culturen in Nederland.\nKlaar om de diversiteit binnen Nederlandse gemeenten te verkennen? Ontdek de diversiteit van de Nederlandse samenleving per gemeente.\n\n\nCode\noptions = df.RegioS.unique().tolist()\ninput_dropdown = alt.binding_select(\n    options=options,\n    name='Gemeente: '\n)\nselection = alt.selection_point(\n    fields=['RegioS'],\n    bind=input_dropdown,\n    empty=False,\n    value='Amsterdam'\n)\n\nalt.data_transformers.disable_max_rows()\nalt.renderers.set_embed_options(actions=False, renderer='svg')\nalt.Chart(df, width=1325).mark_bar(tooltip=True, stroke='black', opacity=1).encode(\n    y=alt.Y('Bevolking_1:Q').title('Aantal in gemeente'),\n    x=alt.X('Nationaliteit').sort('-y').title(None),\n    fill=alt.Fill('Bevolking_1')\n        .legend(title='Aantal in gemeente', orient='top')\n        .title('Aantal in gemeente')\n        .scale(domain=[0, 75000], range=['#FEFBE9', '#FCF7D5', '#F5F3C1', '#EAF0B5', '#DDECBF', '#D0E7CA', '#C2E3D2', '#B5DDD8', '#A8D8DC', '#9BD2E1', '#8DCBE4', '#81C4E7', '#7BBCE7', '#7EB2E4', '#88A5DD', '#9398D2', '#9B8AC4', '#9D7DB2', '#9A709E', '#906388', '#805770', '#684957', '#46353A'], type='pow', exponent=0.2, interpolate='rgb',)\n).add_params(\n    selection\n).transform_filter(\n    selection\n).properties(\n    title=alt.TitleParams(text='Nationaliteiten per gemeente op basis van geboorteland buiten Nederland.', subtitle='CBS, PDOK (2023)', anchor='start')\n)\n\n\n\n\n\n\nDe staafdiagram is hoverbaar en het selectie menu biedt mogelijkheden om een andere gemeente te selecteren.\n\n\nEn om het helemaal af te maken, de gemeenten gesorteerd per nationaliteit.\n\n\nCode\noptions = df.Nationaliteit.unique().tolist()\ninput_dropdown = alt.binding_select(\n    options=options,\n    name='Nationaliteit: '\n)\nselection = alt.selection_point(\n    fields=['Nationaliteit'],\n    bind=input_dropdown,\n    empty=False,\n    value='Pools'\n)\n\nalt.data_transformers.disable_max_rows()\nalt.renderers.set_embed_options(actions=False, renderer='svg')\nalt.Chart(df, width=1325).mark_bar(tooltip=True, stroke='black', opacity=1).encode(\n    y=alt.Y('Bevolking_1:Q').title('Aantal in gemeente'),\n    x=alt.X('RegioS').sort('-y').title(None),\n    fill=alt.Fill('Bevolking_1')\n        .legend(title='Aantal in gemeente', orient='top')\n        .title('Aantal in gemeente')\n        .scale(domain=[0, 75000], range=['#FEFBE9', '#FCF7D5', '#F5F3C1', '#EAF0B5', '#DDECBF', '#D0E7CA', '#C2E3D2', '#B5DDD8', '#A8D8DC', '#9BD2E1', '#8DCBE4', '#81C4E7', '#7BBCE7', '#7EB2E4', '#88A5DD', '#9398D2', '#9B8AC4', '#9D7DB2', '#9A709E', '#906388', '#805770', '#684957', '#46353A'], type='pow', exponent=0.2, interpolate='rgb',)\n).add_params(\n    selection\n).transform_filter(\n    selection\n).transform_window(\n    rank='rank(RegioS)',\n    sort=[alt.SortField('Bevolking_1', order='descending')]\n).transform_filter(\n    (alt.datum.rank &lt; 30)\n).properties(\n    title=alt.TitleParams(text='Gemeenten per nationaliteit op basis van geboorteland buiten Nederland.', subtitle='CBS, PDOK (2023)', anchor='start')\n)\n\n\n\n\n\n\nDe staafdiagram is hoverbaar en het selectie menu biedt mogelijkheden om een andere nationaliteit te selecteren."
  },
  {
    "objectID": "posts/2024-01-26-CBS-nationaliteiten/index.html#verken-de-diversiteit-van-nederlandse-gemeenten",
    "href": "posts/2024-01-26-CBS-nationaliteiten/index.html#verken-de-diversiteit-van-nederlandse-gemeenten",
    "title": "Verken de diversiteit van Nederlandse gemeenten",
    "section": "",
    "text": "In dit artikel duiken we diep in de gegevens van Nederlandse gemeenten op basis van geboortelanden, van de ruwe data tot een boeiende interactieve visualisatie.\nMet behulp van de cbsodata-bibliotheek verzamelen we gedetailleerde bevolkingsgegevens per nationaliteit voor het jaar 2023. Dankzij slimme filtering en coding identificeren we vervolgens per gemeente de twee meest voorkomende Nationaliteiten.\n\n\nCode\nimport cbsodata\nimport pandas as pd\nimport geopandas as gpd\nimport altair as alt\nimport topojson as tp\n\n\n# list of nationaliteit codes\nnatcodes_landen = ['NAT9278','NAT9281','NAT9292','NAT9300','NAT9301','NAT9303','NAT9307','NAT9310','NAT9322','NAT9324','NAT9326','NAT9330','NAT9332','NAT9336','NAT9338','NAT9345','NAT9346','NAT9348','NAT9349','NAT9350','NAT9351','NAT9353','NAT9356','NAT9357','NAT9368','NAT9372','NAT9377','NAT9387','NAT9403','NAT9406','NAT9409','NAT9410','NAT9415','NAT9416','NAT9417','NAT9418','NAT9436','NAT9440','NAT9442','NAT9444','NAT9448','NAT9454','NAT9458','NAT9470','NAT9473','NAT9480']\nfilter_natcodes = ''.join([f\"(Nationaliteit eq '{natcode}') or \" for natcode in natcodes_landen]).rstrip(' or ')\nfilter_natcodes\n\n# collect data for selection of nationalities\ndf = pd.DataFrame(cbsodata.get_data(\n    table_id='85644NED', \n    select=['Bevolking_1', 'Nationaliteit', 'RegioS'], \n    filters=f\"((Geslacht eq 'T001038')) and ((Leeftijd eq '10000')) and ({filter_natcodes}) and ((Perioden eq '2023JJ00')) and ((substringof('GM',RegioS)))\"\n))\ndf = df.dropna(subset='Bevolking_1', how='any')\n\n# get 2nd largest groups for eacht gemeente\ndf_max_2per_gemeente = df.loc[df.groupby('RegioS')['Bevolking_1'].nlargest(2).reset_index(level=0, drop=True).index]\n\n# split in two dataframes\ndf_pop_one = df.loc[df_max_2per_gemeente.groupby('RegioS')['Bevolking_1'].head(1).index]\ndf_pop_two = df.loc[df_max_2per_gemeente.groupby('RegioS')['Bevolking_1'].tail(1).index]\n\n# load IDs of each gemeente\ndf_regioscodes = pd.read_csv('RegioSCodes.csv', sep=';')\ndf_gemcodes = df_regioscodes[df_regioscodes.Identifier.str.startswith('GM')]\n\n# combine with our data from CBS\ndf_pop_one_gemeente_id = pd.merge(df_gemcodes[['Identifier', 'Title']], df_pop_one, right_on='RegioS', left_on='Title', how='left').drop('Title', axis=1)\ndf_pop_two_gemeente_id = pd.merge(df_gemcodes[['Identifier', 'Title']], df_pop_two, right_on='RegioS', left_on='Title', how='left').drop('Title', axis=1)\n\n# load geometry of each gemeente\ngeodata_url = 'gemeenten_2023.geo.json'\ngemeentegrenzen = gpd.read_file(geodata_url, driver='GeoJSON')\ngemeentegrenzen = tp.Topology(gemeentegrenzen, toposimplify=1000, topoquantize=1000).to_gdf()\n\n# connect CBS-data to geometroe wit gemcodes\ndf_pop_one_gemeente_id_geom = pd.merge(gemeentegrenzen[['statcode', 'statnaam', 'geometry']], df_pop_one_gemeente_id, right_on='Identifier', left_on='statcode', how='left').drop(['RegioS', 'Identifier', 'statcode'], axis=1)\ndf_pop_two_gemeente_id_geom = pd.merge(gemeentegrenzen[['statcode', 'statnaam', 'geometry']], df_pop_two_gemeente_id, right_on='Identifier', left_on='statcode', how='left').drop(['RegioS', 'Identifier', 'statcode'], axis=1)\n\n# rename columns\ndf_pop_one_gemeente_id_geom.columns = ['Gemeente', 'geometry', 'Aantal', 'Nationaliteit']\ndf_pop_two_gemeente_id_geom.columns = ['Gemeente', 'geometry', 'Aantal', 'Nationaliteit']\n\n\nMet Altair zijn we in staat om levendige kaarten en staafdiagrammen te creëren. Kleurrijke details, vormen en interactieve elementen maken de data niet alleen toegankelijk, maar ook boeiend. Verken de gegevens op jouw eigen tempo met legenda’s en selectiemogelijkheden.\n\n\nCode\n# build chart\nselection = alt.selection_point(fields=['Nationaliteit'], bind='legend', empty=True)\nfill_colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf', '#aec7e8', '#ffbb78', '#98df8a', '#ff9896', '#c5b0d5', '#c49c94', '#f7b6d2', '#c7c7c7', '#dbdb8d', '#9edae5', '#ad494a', '#8c6d31']\n\nleft_geom = alt.Chart(df_pop_one_gemeente_id_geom, title=alt.Title(text=' ', subtitle='1e meestvoorkomende nationaliteit')).mark_geoshape(tooltip=True, stroke='black').encode(\n    fill=alt.Color('Nationaliteit').scale(range=fill_colors).legend(orient='bottom', columns=9).sort(field='Aantal', op='count', order='descending'),\n    strokeWidth=alt.condition(selection, alt.value(0.4), alt.value(0)),   \n    tooltip=[alt.Tooltip('Gemeente'), alt.Tooltip('Nationaliteit'), alt.Tooltip('Aantal')],\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n).project(type='identity', reflectY=True)\n\nleft_bar = alt.Chart(\n    df_pop_one_gemeente_id_geom, \n    title=alt.Title(text=' ', subtitle='1e meestvoorkomende nationaliteit')\n).mark_bar(tooltip=True, stroke='black').encode(\n    x=alt.X('count()').title('Aantal gemeenten'),\n    y=alt.Y('Nationaliteit').sort('-x').title(None), \n    fill=alt.Fill('Nationaliteit').scale(range=fill_colors).sort(field='Aantal', op='count', order='descending'),\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n)\n\nright_bar = alt.Chart(\n    df_pop_two_gemeente_id_geom, \n    title=alt.Title(text=' ', subtitle='2e meestvoorkomende nationaliteit')\n).mark_bar(tooltip=True, stroke='black').encode(\n    x=alt.X('count()').scale(reverse=True).title('Aantal gemeenten'),\n    y=alt.Y('Nationaliteit').sort('-x').axis(orient='right').title(None), \n    fill=alt.Fill('Nationaliteit').scale(range=fill_colors).sort(field='Aantal', op='count', order='descending'),\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n)\n\nright_geom = alt.Chart(df_pop_two_gemeente_id_geom, title=alt.Title(text=' ',subtitle='2e meestvoorkomende nationaliteit')).mark_geoshape(tooltip=True, stroke='black').encode(\n    fill=alt.Color('Nationaliteit').scale(range=fill_colors).sort(field='Aantal', op='count', order='descending'),\n    strokeWidth=alt.condition(selection, alt.value(0.4), alt.value(0)),   \n    tooltip=[alt.Tooltip('Gemeente'), alt.Tooltip('Nationaliteit'), alt.Tooltip('Aantal')],\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))    \n).project(type='identity', reflectY=True)\n\nalt.renderers.set_embed_options(actions=False, renderer='svg')\nalt.hconcat(\n    left_bar.properties(height=400, width=100),\n    left_geom.properties(height=400, width=400),\n    right_geom.properties(height=400, width=400),\n    right_bar.properties(height=400, width=100)\n).properties(\n    title=alt.TitleParams(text='Nederlandse gemeenten op basis van nationaliteit.', subtitle='CBS, PDOK (2023)', anchor='start')\n).configure_legend(\n    titleFontSize=15,\n    labelFontSize=15,\n    labelLimit=200\n).configure_title(\n    fontSize=15,\n    subtitleFontSize=15\n).add_params(\n    selection\n)\n\n\n\n\n\n\nDe kaart is hoverbaar en de legenda items zijn klikbaar. Ergens in de legenda niet op een naam klikken maakt de selectie ongedaan.\n\n\nDeze analyse onthult inzichten in de diversiteit van nationaliteiten binnen Nederlandse gemeenten. De interactieve visualisatie nodigt je uit om verder te ontdekken, waardoor je een levendig beeld krijgt van de diverse culturen in Nederland.\nKlaar om de diversiteit binnen Nederlandse gemeenten te verkennen? Ontdek de diversiteit van de Nederlandse samenleving per gemeente.\n\n\nCode\noptions = df.RegioS.unique().tolist()\ninput_dropdown = alt.binding_select(\n    options=options,\n    name='Gemeente: '\n)\nselection = alt.selection_point(\n    fields=['RegioS'],\n    bind=input_dropdown,\n    empty=False,\n    value='Amsterdam'\n)\n\nalt.data_transformers.disable_max_rows()\nalt.renderers.set_embed_options(actions=False, renderer='svg')\nalt.Chart(df, width=1325).mark_bar(tooltip=True, stroke='black', opacity=1).encode(\n    y=alt.Y('Bevolking_1:Q').title('Aantal in gemeente'),\n    x=alt.X('Nationaliteit').sort('-y').title(None),\n    fill=alt.Fill('Bevolking_1')\n        .legend(title='Aantal in gemeente', orient='top')\n        .title('Aantal in gemeente')\n        .scale(domain=[0, 75000], range=['#FEFBE9', '#FCF7D5', '#F5F3C1', '#EAF0B5', '#DDECBF', '#D0E7CA', '#C2E3D2', '#B5DDD8', '#A8D8DC', '#9BD2E1', '#8DCBE4', '#81C4E7', '#7BBCE7', '#7EB2E4', '#88A5DD', '#9398D2', '#9B8AC4', '#9D7DB2', '#9A709E', '#906388', '#805770', '#684957', '#46353A'], type='pow', exponent=0.2, interpolate='rgb',)\n).add_params(\n    selection\n).transform_filter(\n    selection\n).properties(\n    title=alt.TitleParams(text='Nationaliteiten per gemeente op basis van geboorteland buiten Nederland.', subtitle='CBS, PDOK (2023)', anchor='start')\n)\n\n\n\n\n\n\nDe staafdiagram is hoverbaar en het selectie menu biedt mogelijkheden om een andere gemeente te selecteren.\n\n\nEn om het helemaal af te maken, de gemeenten gesorteerd per nationaliteit.\n\n\nCode\noptions = df.Nationaliteit.unique().tolist()\ninput_dropdown = alt.binding_select(\n    options=options,\n    name='Nationaliteit: '\n)\nselection = alt.selection_point(\n    fields=['Nationaliteit'],\n    bind=input_dropdown,\n    empty=False,\n    value='Pools'\n)\n\nalt.data_transformers.disable_max_rows()\nalt.renderers.set_embed_options(actions=False, renderer='svg')\nalt.Chart(df, width=1325).mark_bar(tooltip=True, stroke='black', opacity=1).encode(\n    y=alt.Y('Bevolking_1:Q').title('Aantal in gemeente'),\n    x=alt.X('RegioS').sort('-y').title(None),\n    fill=alt.Fill('Bevolking_1')\n        .legend(title='Aantal in gemeente', orient='top')\n        .title('Aantal in gemeente')\n        .scale(domain=[0, 75000], range=['#FEFBE9', '#FCF7D5', '#F5F3C1', '#EAF0B5', '#DDECBF', '#D0E7CA', '#C2E3D2', '#B5DDD8', '#A8D8DC', '#9BD2E1', '#8DCBE4', '#81C4E7', '#7BBCE7', '#7EB2E4', '#88A5DD', '#9398D2', '#9B8AC4', '#9D7DB2', '#9A709E', '#906388', '#805770', '#684957', '#46353A'], type='pow', exponent=0.2, interpolate='rgb',)\n).add_params(\n    selection\n).transform_filter(\n    selection\n).transform_window(\n    rank='rank(RegioS)',\n    sort=[alt.SortField('Bevolking_1', order='descending')]\n).transform_filter(\n    (alt.datum.rank &lt; 30)\n).properties(\n    title=alt.TitleParams(text='Gemeenten per nationaliteit op basis van geboorteland buiten Nederland.', subtitle='CBS, PDOK (2023)', anchor='start')\n)\n\n\n\n\n\n\nDe staafdiagram is hoverbaar en het selectie menu biedt mogelijkheden om een andere nationaliteit te selecteren."
  }
]